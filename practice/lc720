class Solution {
    public String longestWord(String[] words) {
        /**
        sort words
        from end of words, look for the hash value of its letters added
        check the next equal lenght word
        return lexi 
        **/
        HashSet<String> set = new HashSet<>();
        List<String> possibleSolutions = new ArrayList<>();
        for(int i=0;i<words.length;i++){
            set.add(words[i]);
        }
        Arrays.sort(words, new Comparator<String>(){
            public int compare(String w1, String w2){
                return Integer.compare(w1.length(),w2.length());
            }
        });
        
        for(int i=words.length-1;i>=0;i--){            
            if(canBuildWord(words[i], set)){
                if(possibleSolutions.size()>0 && 
                   possibleSolutions.get(possibleSolutions.size()-1).length()>words[i].length()){
                    break;
                }
              possibleSolutions.add(words[i]);              
            } 
        }
        Collections.sort(possibleSolutions);        
        return possibleSolutions.size()>0 ?possibleSolutions.get(0): "";
    }
    
    boolean canBuildWord(String word, HashSet<String> set){        
        for(int i=0;i<word.length();i++){                        
            if(!set.contains(word.substring(0,i+1))){                
                return false;
            }
        }        
        return true;
    }
}
