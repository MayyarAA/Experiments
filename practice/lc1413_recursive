class Solution {
    public int minStartValue(int[] nums) {        
         return minStartValueHelper(nums, 1);
    }

    int minStartValueHelper(int[] nums, int startAddedValue){

        int startValue = startAddedValue; // 0
        int currStartValue = startValue; //0
         
         for(int i=0;i<nums.length;i++){            
             int temp = currStartValue + nums[i]; //10, 8, -2
             if(temp ==0 ){
                 startValue++;
                 currStartValue++;

             } else if(temp < 1){
                 int neededAddToOrgVakue = (-1* (currStartValue+nums[i])) + 1; // 0 + 8 - 10 + 1=1
                 startValue += neededAddToOrgVakue;
                 currStartValue += neededAddToOrgVakue;
             }
             currStartValue+=nums[i]; // 10, 8
         }
         if(currStartValue>=1) return startValue;
         return minStartValueHelper(nums, startAddedValue++);

    }
}
