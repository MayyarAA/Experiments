class Solution {
    public boolean isAlienSorted(String[] words, String order) {
        char[] orderedMaster = order.toCharArray();
        HashMap<Character, Integer> sortedMap = buildSortedMap(order);
        String[] sortedWords = new String[words.length];
        for(int i=0;i<words.length;i++){sortedWords[i]=words[i];}
        sortWords(sortedWords, sortedMap); 
        // System.out.println(Arrays.toString(sortedWords));
        for(int i=0;i<words.length;i++){
            if(sortedWords[i].compareTo(words[i])!=0) return false;
            }
        return true;
    }
    
    void sortWords(String[] sortedWords, HashMap<Character, Integer> sortedMap){
        Arrays.sort(sortedWords, new Comparator<String>(){
           public int compare(String w1, String w2){
               if(w1.compareTo(w2)==0) return 0;
               int[] lexicoOfEachLetter1 = new int[w1.length()];
               int[] lexicoOfEachLetter2 = new int[w2.length()];
               buildLexicoOrderingArray(w1,lexicoOfEachLetter1, sortedMap);
               buildLexicoOrderingArray(w2,lexicoOfEachLetter2, sortedMap);
               int index=0;
               while(index<lexicoOfEachLetter1.length && index<lexicoOfEachLetter2.length){
                   if(lexicoOfEachLetter1[index]<lexicoOfEachLetter2[index]){
                       return -1;
                   }else if(lexicoOfEachLetter1[index]>lexicoOfEachLetter2[index]){
                       return 1;
                   }
                   index++;
               }
               if(index<lexicoOfEachLetter1.length && index>=lexicoOfEachLetter2.length){
                   return 1;
               }else if(index>=lexicoOfEachLetter1.length && index<lexicoOfEachLetter2.length){
                   return -1;
               }               
               return 0;
           } 
        });
    }
    
    void buildLexicoOrderingArray(String word,int[] lettersOrder
                                  , HashMap<Character, Integer> sortedMap){
        char[] wordCharArray = word.toCharArray();
        for(int i=0;i<wordCharArray.length;i++){
            char ch = wordCharArray[i];
            lettersOrder[i] = sortedMap.get(ch);
        }
    }
    HashMap<Character,Integer> buildSortedMap(String order){
        char[] orderedMaster = order.toCharArray();
        HashMap<Character,Integer> map = new HashMap<>();
        for(int i=0;i<orderedMaster.length;i++){
            map.put(orderedMaster[i],i);
        }
        return map;
    }
}
